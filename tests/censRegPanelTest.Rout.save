
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( censReg )
Loading required package: maxLik
Loading required package: miscTools
> library( plm )
Loading required package: kinship
Loading required package: survival
Loading required package: splines
Loading required package: nlme
Loading required package: lattice
[1] "kinship is loaded"
Loading required package: Formula
Loading required package: MASS
Loading required package: sandwich
Loading required package: zoo
> 
> nId <- 15
> nTime <- 4
> 
> set.seed( 123 )
> pData <- data.frame(
+    id = rep( paste( "F", 1:nId, sep = "_" ), each = nTime ),
+    time = rep( 1980 + 1:nTime, nId ) )
> pData$ui <- rep( rnorm( nId ), each = nTime )
> pData$x1 <- rnorm( nId * nTime )
> pData$x2 <- runif( nId * nTime )
> pData$ys <- -1 + pData$ui + 2 * pData$x1 + 3 * pData$x2 + rnorm( nId * nTime )
> pData$y <- ifelse( pData$ys > 0, pData$ys, 0 )
> nData <- pData # save data set without information on panel structure
> pData <- pdata.frame( pData, c( "id", "time" ) )
> 
> 
> ## Newton-Raphson method
> randEff <- censReg( y ~ x1 + x2, data = pData )
> print( randEff )

Call:
censReg(formula = y ~ x1 + x2, data = pData)

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
   -0.36562     1.68000     2.24054    -0.12955    -0.01241 

> print( randEff, logSigma = FALSE )

Call:
censReg(formula = y ~ x1 + x2, data = pData)

Coefficients:
(Intercept)          x1          x2     sigmaMu     sigmaNu 
    -0.3656      1.6800      2.2405      0.8785      0.9877 

> maxLik:::summary.maxLik( randEff )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.365623   0.474457 -0.7706 0.4409361    
x1           1.680004   0.209222  8.0298 9.767e-16 ***
x2           2.240544   0.673889  3.3248 0.0008848 ***
logSigmaMu  -0.129547   0.258070 -0.5020 0.6156793    
logSigmaNu  -0.012408   0.129690 -0.0957 0.9237786    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEff )

Call:
censReg(formula = y ~ x1 + x2, data = pData)

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept) -0.36562    0.47446  -0.771 0.440936    
x1           1.68000    0.20922   8.030 9.77e-16 ***
x2           2.24054    0.67389   3.325 0.000885 ***
logSigmaMu  -0.12955    0.25807  -0.502 0.615679    
logSigmaNu  -0.01241    0.12969  -0.096 0.923779    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-likelihood: -73.19882 on 5 Df

> print( summary( randEff ), logSigma = FALSE )

Call:
censReg(formula = y ~ x1 + x2, data = pData)

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  -0.3656     0.4745  -0.771 0.440936    
x1            1.6800     0.2092   8.030 9.77e-16 ***
x2            2.2405     0.6739   3.325 0.000885 ***
sigmaMu       0.8785     0.2267   3.875 0.000107 ***
sigmaNu       0.9877     0.1281   7.711 1.25e-14 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-likelihood: -73.19882 on 5 Df

> coef( randEff )
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36562313  1.68000400  2.24054376 -0.12954703 -0.01240809 
> coef( randEff, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
 -0.3656231   1.6800040   2.2405438   0.8784933   0.9876686 
> vcov( randEff )
             (Intercept)           x1           x2   logSigmaMu   logSigmaNu
(Intercept)  0.225109672 -0.020570168 -0.254602886 -0.023824162 -0.002973952
x1          -0.020570168  0.043773972  0.008562225  0.013404079  0.002969957
x2          -0.254602886  0.008562225  0.454125882  0.017179542  0.001505438
logSigmaMu  -0.023824162  0.013404079  0.017179542  0.066600320 -0.002638871
logSigmaNu  -0.002973952  0.002969957  0.001505438 -0.002638871  0.016819442
> vcov( randEff, logSigma = FALSE )
             (Intercept)           x1           x2      sigmaMu      sigmaNu
(Intercept)  0.225109672 -0.020570168 -0.254602886 -0.020929366 -0.002937279
x1          -0.020570168  0.043773972  0.008562225  0.011775394  0.002933333
x2          -0.254602886  0.008562225  0.454125882  0.015092113  0.001486874
sigmaMu     -0.020929366  0.011775394  0.015092113  0.051398826 -0.002289643
sigmaNu     -0.002937279  0.002933333  0.001486874 -0.002289643  0.016407184
> coef( summary( randEff ) )
               Estimate Std. error     t value      Pr(> t)
(Intercept) -0.36562313  0.4744572 -0.77061344 4.409361e-01
x1           1.68000400  0.2092223  8.02975581 9.766687e-16
x2           2.24054376  0.6738886  3.32479829 8.848252e-04
logSigmaMu  -0.12954703  0.2580704 -0.50198333 6.156793e-01
logSigmaNu  -0.01240809  0.1296898 -0.09567514 9.237786e-01
> coef( summary( randEff ), logSigma = FALSE )
              Estimate Std. error    t value      Pr(> t)
(Intercept) -0.3656231  0.4744572 -0.7706134 4.409361e-01
x1           1.6800040  0.2092223  8.0297558 9.766687e-16
x2           2.2405438  0.6738886  3.3247983 8.848252e-04
sigmaMu      0.8784933  0.2267131  3.8749120 1.066632e-04
sigmaNu      0.9876686  0.1280905  7.7107072 1.251225e-14
> logLik( randEff )
'log Lik.' -73.19882 (df=5)
> print.default( randEff )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36562313  1.68000400  2.24054376 -0.12954703 -0.01240809 

$gradient
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
1.712246e-11 4.533664e-11 1.345291e-11 8.220785e-12 6.208178e-11 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.321985  -4.096607 -7.3075697  -2.1079024  -1.3088177
x1            -4.096607 -26.076787 -1.9905305   4.4849638   4.7620891
x2            -7.307570  -1.990530 -6.2362552  -0.6238251  -0.4803054
logSigmaMu    -2.107902   4.484964 -0.6238251 -16.6582041  -3.7223987
logSigmaNu    -1.308818   4.762089 -0.4803054  -3.7223987 -61.0683413

$code
[1] 1

$message
[1] "gradient close to zero"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 5

$type
[1] "Newton-Raphson maximisation"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85308353  0.22558520 -0.07261010 -0.1440032 -0.9609402
 [2,] -1.70309357  0.04839424 -1.18987552  1.6807831 -1.0133141
 [3,]  1.75084247  0.33367482  1.72755770  1.8353812  1.8043727
 [4,]  0.15577733 -0.20240007 -0.43224660 -0.6891081 -1.4351382
 [5,]  0.12950026  0.98433620  0.68943625 -0.6770204 -0.5543803
 [6,]  0.33035909 -0.30928416  0.38471147 -0.4921375 -1.5793716
 [7,] -0.08212549 -3.18521871 -0.23724729 -0.6766315  6.0271932
 [8,] -0.26685300  0.37888544  0.05565473 -0.5385828 -1.1091111
 [9,]  1.14824183  0.59396387  0.30328556  0.1329802 -1.6172740
[10,] -0.43505392 -0.40640593 -0.15245982 -0.4687582 -1.9364984
[11,] -0.02839185  1.44795739 -0.64407731 -0.9172655  2.7349924
[12,]  1.21047881  0.53669833  0.61328528  0.2055542 -1.7351236
[13,]  0.53592707 -0.22523044  0.33117482 -0.3691166 -1.4082834
[14,] -1.81460674 -1.30608969 -0.91950989  1.9573174  2.5815580
[15,] -0.07791875  1.08513351 -0.45707928 -0.8393922  0.2013187

$call
censReg(formula = y ~ x1 + x2, data = pData)

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## BHHH method
> randEffBhhh <- censReg( y ~ x1 + x2, data = pData, method = "BHHH" )
> print( randEffBhhh )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BHHH")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
   -0.36563     1.68002     2.24056    -0.12957    -0.01240 

> maxLik:::summary.maxLik( randEffBhhh )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 18 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.365635   0.555054 -0.6587  0.510065    
x1           1.680016   0.293775  5.7187 1.073e-08 ***
x2           2.240556   0.729501  3.0714  0.002131 ** 
logSigmaMu  -0.129565   0.295017 -0.4392  0.660531    
logSigmaNu  -0.012402   0.140134 -0.0885  0.929481    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBhhh )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BHHH")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  -0.3656     0.5551  -0.659  0.51006    
x1            1.6800     0.2938   5.719 1.07e-08 ***
x2            2.2406     0.7295   3.071  0.00213 ** 
logSigmaMu   -0.1296     0.2950  -0.439  0.66053    
logSigmaNu   -0.0124     0.1401  -0.088  0.92948    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BHHH maximisation, 18 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19882 on 5 Df

> print.default( randEffBhhh )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36563477  1.68001566  2.24055570 -0.12956535 -0.01240161 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 5.028294e-05 -3.315101e-04 -4.246354e-06  3.505038e-04 -2.626408e-04 

$hessian
            (Intercept)         x1         x2  logSigmaMu logSigmaNu
(Intercept)  -13.482494  -4.096061 -8.3241402   2.7373240   3.959016
x1            -4.096061 -17.395897 -2.1956247   2.0949384  19.029556
x2            -8.324140  -2.195625 -7.3456165  -0.2437129   3.421562
logSigmaMu     2.737324   2.094938 -0.2437129 -13.9308908  -3.639137
logSigmaNu     3.959016  19.029556  3.4215617  -3.6391374 -73.168704
attr(,"type")
[1] "BHHH"

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 18

$type
[1] "BHHH maximisation"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85309912  0.22553991 -0.07262972 -0.1439976 -0.9609756
 [2,] -1.70314125  0.04834913 -1.18991475  1.6808211 -1.0132976
 [3,]  1.75089168  0.33368134  1.72757656  1.8353986  1.8044304
 [4,]  0.15581599 -0.20240761 -0.43221921 -0.6890852 -1.4351543
 [5,]  0.12951232  0.98431668  0.68943033 -0.6770023 -0.5544220
 [6,]  0.33038531 -0.30929737  0.38473066 -0.4921403 -1.5793732
 [7,] -0.08212211 -3.18519652 -0.23724499 -0.6766142  6.0271629
 [8,] -0.26685182  0.37888104  0.05565305 -0.5385702 -1.1091241
 [9,]  1.14826405  0.59392337  0.30329461  0.1330245 -1.6172865
[10,] -0.43507487 -0.40642217 -0.15246997 -0.4687544 -1.9364930
[11,] -0.02840097  1.44793082 -0.64407223 -0.9172307  2.7348842
[12,]  1.21050842  0.53669645  0.61330484  0.2056154 -1.7351598
[13,]  0.53595825 -0.22524780  0.33119153 -0.3691112 -1.4082671
[14,] -1.81465694 -1.30619017 -0.91955280  1.9573642  2.5815611
[15,] -0.07793866  1.08511138 -0.45708215 -0.8393671  0.2012520

$call
censReg(formula = y ~ x1 + x2, data = pData, method = "BHHH")

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## BFGS method (optim)
> randEffBfgs <- censReg( y ~ x1 + x2, data = pData, method = "BFGS" )
> print( randEffBfgs )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGS")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
   -0.36562     1.68000     2.24055    -0.12955    -0.01241 

> maxLik:::summary.maxLik( randEffBfgs )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 25 iterations
Return code 0: successful convergence 
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.365624   0.474456 -0.7706 0.4409343    
x1           1.680002   0.209222  8.0298 9.767e-16 ***
x2           2.240551   0.673888  3.3248 0.0008848 ***
logSigmaMu  -0.129549   0.258071 -0.5020 0.6156731    
logSigmaNu  -0.012408   0.129690 -0.0957 0.9237762    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBfgs )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGS")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept) -0.36562    0.47446  -0.771 0.440934    
x1           1.68000    0.20922   8.030 9.77e-16 ***
x2           2.24055    0.67389   3.325 0.000885 ***
logSigmaMu  -0.12955    0.25807  -0.502 0.615673    
logSigmaNu  -0.01241    0.12969  -0.096 0.923776    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS maximisation, 25 iterations
Return code 0: successful convergence 
Log-likelihood: -73.19882 on 5 Df

> print.default( randEffBfgs )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36562386  1.68000222  2.24055118 -0.12954945 -0.01240847 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-3.160077e-05  2.178336e-05 -3.570719e-05  3.081674e-05  2.108131e-05 

$hessian
            (Intercept)         x1         x2  logSigmaMu logSigmaNu
(Intercept)  -13.322030  -4.096615 -7.3075895  -2.1078505  -1.308810
x1            -4.096615 -26.076823 -1.9905334   4.4849768   4.762042
x2            -7.307589  -1.990533 -6.2362665  -0.6237935  -0.480264
logSigmaMu    -2.107850   4.484977 -0.6237935 -16.6581488  -3.722435
logSigmaNu    -1.308810   4.762042 -0.4802640  -3.7224350 -61.068402

$code
[1] 0

$message
[1] "successful convergence "

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
function 
      25 

$type
[1] "BFGS maximisation"

$constraints
NULL

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85308743  0.22558129 -0.07261263 -0.1440013 -0.9609385
 [2,] -1.70310343  0.04839017 -1.18988370  1.6807981 -1.0133093
 [3,]  1.75084680  0.33368182  1.72755839  1.8353799  1.8043672
 [4,]  0.15577623 -0.20239996 -0.43224879 -0.6891122 -1.4351265
 [5,]  0.12949863  0.98433692  0.68943374 -0.6770205 -0.5543875
 [6,]  0.33035850 -0.30927350  0.38470918 -0.4921407 -1.5793728
 [7,] -0.08212636 -3.18521917 -0.23724752 -0.6766300  6.0271888
 [8,] -0.26685580  0.37888651  0.05565314 -0.5385807 -1.1091140
 [9,]  1.14824376  0.59396790  0.30328585  0.1329813 -1.6172723
[10,] -0.43505882 -0.40640593 -0.15246287 -0.4687554 -1.9365001
[11,] -0.02839283  1.44796138 -0.64407965 -0.9172624  2.7350038
[12,]  1.21048230  0.53670265  0.61328478  0.2055557 -1.7351212
[13,]  0.53592379 -0.22522781  0.33117257 -0.3691209 -1.4082845
[14,] -1.81461479 -1.30609804 -0.91951560  1.9573273  2.5815634
[15,] -0.07792214  1.08513754 -0.45708262 -0.8393873  0.2013247

$call
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGS")

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"  
> 
> 
> ## BFGS method (R)
> randEffBfgsr <- censReg( y ~ x1 + x2, data = pData, method = "BFGSR" )
> print( randEffBfgsr )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
   -0.36562     1.68000     2.24054    -0.12955    -0.01241 

> maxLik:::summary.maxLik( randEffBfgsr )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.365623   0.474457 -0.7706 0.4409359    
x1           1.680004   0.209222  8.0298 9.767e-16 ***
x2           2.240544   0.673889  3.3248 0.0008848 ***
logSigmaMu  -0.129547   0.258070 -0.5020 0.6156791    
logSigmaNu  -0.012408   0.129690 -0.0957 0.9237792    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBfgsr )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept) -0.36562    0.47446  -0.771 0.440936    
x1           1.68000    0.20922   8.030 9.77e-16 ***
x2           2.24054    0.67389   3.325 0.000885 ***
logSigmaMu  -0.12955    0.25807  -0.502 0.615679    
logSigmaNu  -0.01241    0.12969  -0.096 0.923779    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19882 on 5 Df

> print.default( randEffBfgsr )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36562324  1.68000398  2.24054396 -0.12954711 -0.01240798 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 1.752053e-07  6.964484e-07 -3.816903e-07  9.595136e-07 -6.239532e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.321986  -4.096607 -7.3075700  -2.1079020  -1.3088195
x1            -4.096607 -26.076783 -1.9905303   4.4849634   4.7620874
x2            -7.307570  -1.990530 -6.2362548  -0.6238247  -0.4803056
logSigmaMu    -2.107902   4.484963 -0.6238247 -16.6581988  -3.7224013
logSigmaNu    -1.308819   4.762087 -0.4803056  -3.7224012 -61.0683295

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85308347  0.22558499 -0.07261018 -0.1440032 -0.9609406
 [2,] -1.70309377  0.04839407 -1.18987568  1.6807832 -1.0133140
 [3,]  1.75084257  0.33367521  1.72755756  1.8353810  1.8043722
 [4,]  0.15577754 -0.20240005 -0.43224639 -0.6891080 -1.4351384
 [5,]  0.12950028  0.98433611  0.68943609 -0.6770203 -0.5543808
 [6,]  0.33035927 -0.30928374  0.38471150 -0.4921375 -1.5793720
 [7,] -0.08212546 -3.18521797 -0.23724723 -0.6766314  6.0271914
 [8,] -0.26685304  0.37888545  0.05565469 -0.5385827 -1.1091112
 [9,]  1.14824187  0.59396378  0.30328558  0.1329804 -1.6172740
[10,] -0.43505399 -0.40640581 -0.15245987 -0.4687583 -1.9364985
[11,] -0.02839190  1.44795720 -0.64407725 -0.9172652  2.7349914
[12,]  1.21047895  0.53669838  0.61328533  0.2055545 -1.7351239
[13,]  0.53592708 -0.22523038  0.33117481 -0.3691167 -1.4082836
[14,] -1.81460685 -1.30608988 -0.91951004  1.9573173  2.5815575
[15,] -0.07791890  1.08513335 -0.45707930 -0.8393920  0.2013182

$call
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGSR")

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## left-censoring at 5
> pData$yAdd <- pData$y + 5
> randEffAdd <- censReg( yAdd ~ x1 + x2, data = pData, method = "BFGSR", left = 5 )
> print( randEffAdd )

Call:
censReg(formula = yAdd ~ x1 + x2, left = 5, data = pData, method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
    4.63438     1.68000     2.24054    -0.12955    -0.01241 

> maxLik:::summary.maxLik( randEffAdd )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept)  4.634377   0.474457  9.7677 < 2.2e-16 ***
x1           1.680004   0.209222  8.0298 9.767e-16 ***
x2           2.240544   0.673889  3.3248 0.0008848 ***
logSigmaMu  -0.129547   0.258070 -0.5020 0.6156791    
logSigmaNu  -0.012408   0.129690 -0.0957 0.9237792    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffAdd )

Call:
censReg(formula = yAdd ~ x1 + x2, left = 5, data = pData, method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  4.63438    0.47446   9.768  < 2e-16 ***
x1           1.68000    0.20922   8.030 9.77e-16 ***
x2           2.24054    0.67389   3.325 0.000885 ***
logSigmaMu  -0.12955    0.25807  -0.502 0.615679    
logSigmaNu  -0.01241    0.12969  -0.096 0.923779    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19882 on 5 Df

> coef( randEffAdd )
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 4.63437676  1.68000398  2.24054396 -0.12954711 -0.01240798 
> coef( randEffAdd, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
  4.6343768   1.6800040   2.2405440   0.8784932   0.9876687 
> vcov( randEffAdd )
             (Intercept)           x1           x2   logSigmaMu   logSigmaNu
(Intercept)  0.225109676 -0.020570169 -0.254602918 -0.023824169 -0.002973956
x1          -0.020570169  0.043773979  0.008562227  0.013404084  0.002969957
x2          -0.254602918  0.008562227  0.454125958  0.017179555  0.001505443
logSigmaMu  -0.023824169  0.013404084  0.017179555  0.066600343 -0.002638875
logSigmaNu  -0.002973956  0.002969957  0.001505443 -0.002638875  0.016819446
> vcov( randEffAdd, logSigma = FALSE )
             (Intercept)           x1           x2      sigmaMu      sigmaNu
(Intercept)  0.225109676 -0.020570169 -0.254602918 -0.020929371 -0.002937284
x1          -0.020570169  0.043773979  0.008562227  0.011775397  0.002933333
x2          -0.254602918  0.008562227  0.454125958  0.015092122  0.001486879
sigmaMu     -0.020929371  0.011775397  0.015092122  0.051398836 -0.002289647
sigmaNu     -0.002937284  0.002933333  0.001486879 -0.002289647  0.016407191
> logLik( randEffAdd )
'log Lik.' -73.19882 (df=5)
> print.default( randEffAdd )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 4.63437676  1.68000398  2.24054396 -0.12954711 -0.01240798 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 1.752053e-07  6.964484e-07 -3.816903e-07  9.595136e-07 -6.239532e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.321986  -4.096607 -7.3075700  -2.1079020  -1.3088195
x1            -4.096607 -26.076783 -1.9905303   4.4849634   4.7620874
x2            -7.307570  -1.990530 -6.2362548  -0.6238247  -0.4803056
logSigmaMu    -2.107902   4.484963 -0.6238247 -16.6581988  -3.7224013
logSigmaNu    -1.308819   4.762087 -0.4803056  -3.7224013 -61.0683295

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85308347  0.22558499 -0.07261018 -0.1440032 -0.9609406
 [2,] -1.70309377  0.04839407 -1.18987568  1.6807832 -1.0133140
 [3,]  1.75084257  0.33367521  1.72755756  1.8353810  1.8043722
 [4,]  0.15577754 -0.20240005 -0.43224639 -0.6891080 -1.4351384
 [5,]  0.12950028  0.98433611  0.68943609 -0.6770203 -0.5543808
 [6,]  0.33035927 -0.30928374  0.38471150 -0.4921375 -1.5793720
 [7,] -0.08212546 -3.18521797 -0.23724723 -0.6766314  6.0271914
 [8,] -0.26685304  0.37888545  0.05565469 -0.5385827 -1.1091112
 [9,]  1.14824187  0.59396378  0.30328558  0.1329804 -1.6172740
[10,] -0.43505399 -0.40640581 -0.15245987 -0.4687583 -1.9364985
[11,] -0.02839190  1.44795720 -0.64407725 -0.9172652  2.7349914
[12,]  1.21047895  0.53669838  0.61328533  0.2055545 -1.7351239
[13,]  0.53592708 -0.22523038  0.33117481 -0.3691167 -1.4082836
[14,] -1.81460685 -1.30608988 -0.91951004  1.9573173  2.5815575
[15,] -0.07791890  1.08513335 -0.45707930 -0.8393920  0.2013182

$call
censReg(formula = yAdd ~ x1 + x2, left = 5, data = pData, method = "BFGSR")

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## right-censoring
> pData$yNeg <- - pData$y
> randEffNeg <- censReg( yNeg ~ x1 + x2, data = pData, method = "BFGSR",
+    left = -Inf, right = 0 )
> print( randEffNeg )

Call:
censReg(formula = yNeg ~ x1 + x2, left = -Inf, right = 0, data = pData, 
    method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
    0.36562    -1.68000    -2.24054    -0.12955    -0.01241 

> maxLik:::summary.maxLik( randEffNeg )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept)  0.365623   0.474457  0.7706 0.4409359    
x1          -1.680004   0.209222 -8.0298 9.767e-16 ***
x2          -2.240544   0.673889 -3.3248 0.0008848 ***
logSigmaMu  -0.129547   0.258070 -0.5020 0.6156791    
logSigmaNu  -0.012408   0.129690 -0.0957 0.9237792    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffNeg )

Call:
censReg(formula = yNeg ~ x1 + x2, left = -Inf, right = 0, data = pData, 
    method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60              0             40             20 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  0.36562    0.47446   0.771 0.440936    
x1          -1.68000    0.20922  -8.030 9.77e-16 ***
x2          -2.24054    0.67389  -3.325 0.000885 ***
logSigmaMu  -0.12955    0.25807  -0.502 0.615679    
logSigmaNu  -0.01241    0.12969  -0.096 0.923779    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19882 on 5 Df

> coef( randEffNeg )
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 0.36562324 -1.68000398 -2.24054396 -0.12954711 -0.01240798 
> coef( randEffNeg, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
  0.3656232  -1.6800040  -2.2405440   0.8784932   0.9876687 
> vcov( randEffNeg )
             (Intercept)           x1           x2   logSigmaMu   logSigmaNu
(Intercept)  0.225109676 -0.020570169 -0.254602918  0.023824169  0.002973956
x1          -0.020570169  0.043773979  0.008562227 -0.013404084 -0.002969957
x2          -0.254602918  0.008562227  0.454125958 -0.017179555 -0.001505443
logSigmaMu   0.023824169 -0.013404084 -0.017179554  0.066600343 -0.002638875
logSigmaNu   0.002973956 -0.002969957 -0.001505443 -0.002638875  0.016819446
> vcov( randEffNeg, logSigma = FALSE )
             (Intercept)           x1           x2      sigmaMu      sigmaNu
(Intercept)  0.225109676 -0.020570169 -0.254602918  0.020929371  0.002937284
x1          -0.020570169  0.043773979  0.008562227 -0.011775397 -0.002933333
x2          -0.254602918  0.008562227  0.454125958 -0.015092122 -0.001486879
sigmaMu      0.020929371 -0.011775397 -0.015092122  0.051398836 -0.002289647
sigmaNu      0.002937284 -0.002933333 -0.001486879 -0.002289647  0.016407191
> logLik( randEffNeg )
'log Lik.' -73.19882 (df=5)
> print.default( randEffNeg )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 0.36562324 -1.68000398 -2.24054396 -0.12954711 -0.01240798 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-1.752053e-07 -6.964484e-07  3.816903e-07  9.595136e-07 -6.239532e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.321986  -4.096607 -7.3075700   2.1079020   1.3088195
x1            -4.096607 -26.076783 -1.9905303  -4.4849634  -4.7620874
x2            -7.307570  -1.990530 -6.2362548   0.6238247   0.4803056
logSigmaMu     2.107902  -4.484963  0.6238247 -16.6581988  -3.7224012
logSigmaNu     1.308819  -4.762087  0.4803056  -3.7224013 -61.0683295

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,]  0.85308347 -0.22558499  0.07261018 -0.1440032 -0.9609406
 [2,]  1.70309377 -0.04839407  1.18987568  1.6807832 -1.0133140
 [3,] -1.75084257 -0.33367521 -1.72755756  1.8353810  1.8043722
 [4,] -0.15577754  0.20240005  0.43224639 -0.6891080 -1.4351384
 [5,] -0.12950028 -0.98433611 -0.68943609 -0.6770203 -0.5543808
 [6,] -0.33035927  0.30928374 -0.38471150 -0.4921375 -1.5793720
 [7,]  0.08212546  3.18521797  0.23724723 -0.6766314  6.0271914
 [8,]  0.26685304 -0.37888545 -0.05565469 -0.5385827 -1.1091112
 [9,] -1.14824187 -0.59396378 -0.30328558  0.1329804 -1.6172740
[10,]  0.43505399  0.40640581  0.15245987 -0.4687583 -1.9364985
[11,]  0.02839190 -1.44795720  0.64407725 -0.9172652  2.7349914
[12,] -1.21047895 -0.53669838 -0.61328533  0.2055545 -1.7351239
[13,] -0.53592708  0.22523038 -0.33117481 -0.3691167 -1.4082836
[14,]  1.81460685  1.30608988  0.91951004  1.9573173  2.5815575
[15,]  0.07791890 -1.08513335  0.45707930 -0.8393920  0.2013182

$call
censReg(formula = yNeg ~ x1 + x2, left = -Inf, right = 0, data = pData, 
    method = "BFGSR")

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60              0             40             20 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## right-censoring at -5
> pData$yAddNeg <- - pData$yAdd
> randEffAddNeg <- censReg( yAddNeg ~ x1 + x2, data = pData, method = "BFGSR",
+    left = -Inf, right = -5 )
> print( randEffAddNeg )

Call:
censReg(formula = yAddNeg ~ x1 + x2, left = -Inf, right = -5, 
    data = pData, method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
   -4.63438    -1.68000    -2.24054    -0.12955    -0.01241 

> maxLik:::summary.maxLik( randEffAddNeg )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -4.634377   0.474457 -9.7677 < 2.2e-16 ***
x1          -1.680004   0.209222 -8.0298 9.767e-16 ***
x2          -2.240544   0.673889 -3.3248 0.0008848 ***
logSigmaMu  -0.129547   0.258070 -0.5020 0.6156791    
logSigmaNu  -0.012408   0.129690 -0.0957 0.9237792    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffAddNeg )

Call:
censReg(formula = yAddNeg ~ x1 + x2, left = -Inf, right = -5, 
    data = pData, method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60              0             40             20 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept) -4.63438    0.47446  -9.768  < 2e-16 ***
x1          -1.68000    0.20922  -8.030 9.77e-16 ***
x2          -2.24054    0.67389  -3.325 0.000885 ***
logSigmaMu  -0.12955    0.25807  -0.502 0.615679    
logSigmaNu  -0.01241    0.12969  -0.096 0.923779    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19882 on 5 Df

> coef( randEffAddNeg )
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-4.63437676 -1.68000398 -2.24054396 -0.12954711 -0.01240798 
> coef( randEffAddNeg, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
 -4.6343768  -1.6800040  -2.2405440   0.8784932   0.9876687 
> vcov( randEffAddNeg )
             (Intercept)           x1           x2   logSigmaMu   logSigmaNu
(Intercept)  0.225109676 -0.020570169 -0.254602918  0.023824169  0.002973956
x1          -0.020570169  0.043773979  0.008562227 -0.013404084 -0.002969957
x2          -0.254602918  0.008562227  0.454125958 -0.017179555 -0.001505443
logSigmaMu   0.023824170 -0.013404084 -0.017179555  0.066600343 -0.002638875
logSigmaNu   0.002973956 -0.002969957 -0.001505443 -0.002638875  0.016819446
> vcov( randEffAddNeg, logSigma = FALSE )
             (Intercept)           x1           x2      sigmaMu      sigmaNu
(Intercept)  0.225109676 -0.020570169 -0.254602918  0.020929371  0.002937284
x1          -0.020570169  0.043773979  0.008562227 -0.011775397 -0.002933333
x2          -0.254602918  0.008562227  0.454125958 -0.015092122 -0.001486879
sigmaMu      0.020929371 -0.011775397 -0.015092122  0.051398836 -0.002289647
sigmaNu      0.002937284 -0.002933333 -0.001486879 -0.002289647  0.016407191
> logLik( randEffAddNeg )
'log Lik.' -73.19882 (df=5)
> print.default( randEffAddNeg )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-4.63437676 -1.68000398 -2.24054396 -0.12954711 -0.01240798 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-1.752053e-07 -6.964484e-07  3.816903e-07  9.595136e-07 -6.239532e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.321986  -4.096607 -7.3075700   2.1079020   1.3088195
x1            -4.096607 -26.076783 -1.9905303  -4.4849634  -4.7620874
x2            -7.307570  -1.990530 -6.2362548   0.6238247   0.4803056
logSigmaMu     2.107902  -4.484963  0.6238247 -16.6581988  -3.7224012
logSigmaNu     1.308819  -4.762087  0.4803056  -3.7224013 -61.0683295

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,]  0.85308347 -0.22558499  0.07261018 -0.1440032 -0.9609406
 [2,]  1.70309377 -0.04839407  1.18987568  1.6807832 -1.0133140
 [3,] -1.75084257 -0.33367521 -1.72755756  1.8353810  1.8043722
 [4,] -0.15577754  0.20240005  0.43224639 -0.6891080 -1.4351384
 [5,] -0.12950028 -0.98433611 -0.68943609 -0.6770203 -0.5543808
 [6,] -0.33035927  0.30928374 -0.38471150 -0.4921375 -1.5793720
 [7,]  0.08212546  3.18521797  0.23724723 -0.6766314  6.0271914
 [8,]  0.26685304 -0.37888545 -0.05565469 -0.5385827 -1.1091112
 [9,] -1.14824187 -0.59396378 -0.30328558  0.1329804 -1.6172740
[10,]  0.43505399  0.40640581  0.15245987 -0.4687583 -1.9364985
[11,]  0.02839190 -1.44795720  0.64407725 -0.9172652  2.7349914
[12,] -1.21047895 -0.53669838 -0.61328533  0.2055545 -1.7351239
[13,] -0.53592708  0.22523038 -0.33117481 -0.3691167 -1.4082836
[14,]  1.81460685  1.30608988  0.91951004  1.9573173  2.5815575
[15,]  0.07791890 -1.08513335  0.45707930 -0.8393920  0.2013182

$call
censReg(formula = yAddNeg ~ x1 + x2, left = -Inf, right = -5, 
    data = pData, method = "BFGSR")

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60              0             40             20 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## both right and left censoring
> pData$yBoth <- ifelse( pData$y < 3, pData$y, 3 )
> randEffBoth <- censReg( yBoth ~ x1 + x2, data = pData, method = "BFGSR",
+    left = 0, right = 3 )
> print( randEffBoth )

Call:
censReg(formula = yBoth ~ x1 + x2, left = 0, right = 3, data = pData, 
    method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  -0.235535    1.893305    1.972325    0.001777    0.052887 

> maxLik:::summary.maxLik( randEffBoth )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 16 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -64.31272 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.235536   0.548605 -0.4293   0.66768    
x1           1.893306   0.301140  6.2871 3.234e-10 ***
x2           1.972325   0.819113  2.4079   0.01605 *  
logSigmaMu   0.001777   0.277794  0.0064   0.99490    
logSigmaNu   0.052887   0.163015  0.3244   0.74561    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBoth )

Call:
censReg(formula = yBoth ~ x1 + x2, left = 0, right = 3, data = pData, 
    method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             28             12 

Coefficients:
             Estimate Std. error t value  Pr(> t)    
(Intercept) -0.235535   0.548605  -0.429   0.6677    
x1           1.893305   0.301140   6.287 3.23e-10 ***
x2           1.972325   0.819113   2.408   0.0160 *  
logSigmaMu   0.001777   0.277794   0.006   0.9949    
logSigmaNu   0.052887   0.163015   0.324   0.7456    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS-YC maximization, 16 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -64.31272 on 5 Df

> print( summary( randEffBoth ), logSigma = FALSE )

Call:
censReg(formula = yBoth ~ x1 + x2, left = 0, right = 3, data = pData, 
    method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             28             12 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  -0.2355     0.5486  -0.429 0.667679    
x1            1.8933     0.3011   6.287 3.23e-10 ***
x2            1.9723     0.8191   2.408 0.016046 *  
sigmaMu       1.0018     0.2783   3.600 0.000318 ***
sigmaNu       1.0543     0.1719   6.134 8.55e-10 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS-YC maximization, 16 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -64.31272 on 5 Df

> coef( randEffBoth )
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
-0.235535467  1.893305460  1.972325289  0.001776973  0.052886968 
> coef( randEffBoth, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
 -0.2355355   1.8933055   1.9723253   1.0017786   1.0543105 
> vcov( randEffBoth )
            (Intercept)          x1          x2   logSigmaMu   logSigmaNu
(Intercept)  0.30096775 -0.03150689 -0.36439615 -0.016096679 -0.016446163
x1          -0.03150689  0.09068516  0.03196988  0.035193435  0.015934669
x2          -0.36439615  0.03196988  0.67094660  0.018772996  0.024627417
logSigmaMu  -0.01609668  0.03519344  0.01877300  0.077169281  0.004356389
logSigmaNu  -0.01644616  0.01593467  0.02462742  0.004356389  0.026573903
> vcov( randEffBoth, logSigma = FALSE )
            (Intercept)          x1          x2      sigmaMu      sigmaNu
(Intercept)  0.30096775 -0.03150689 -0.36439615 -0.016125308 -0.017339362
x1          -0.03150689  0.09068516  0.03196988  0.035256029  0.016800088
x2          -0.36439615  0.03196988  0.67094660  0.018806384  0.025964943
sigmaMu     -0.01612531  0.03525603  0.01880638  0.077444024  0.004601155
sigmaNu     -0.01733936  0.01680009  0.02596494  0.004601155  0.029538768
> coef( summary( randEffBoth ) )
                Estimate Std. error      t value      Pr(> t)
(Intercept) -0.235535467  0.5486053 -0.429335037 6.676794e-01
x1           1.893305460  0.3011398  6.287131891 3.233846e-10
x2           1.972325289  0.8191133  2.407878483 1.604552e-02
logSigmaMu   0.001776973  0.2777936  0.006396737 9.948962e-01
logSigmaNu   0.052886968  0.1630150  0.324429993 7.456125e-01
> coef( summary( randEffBoth ), logSigma = FALSE )
              Estimate Std. error   t value      Pr(> t)
(Intercept) -0.2355355  0.5486053 -0.429335 6.676794e-01
x1           1.8933055  0.3011398  6.287132 3.233846e-10
x2           1.9723253  0.8191133  2.407878 1.604552e-02
sigmaMu      1.0017786  0.2782877  3.599795 3.184681e-04
sigmaNu      1.0543105  0.1718685  6.134403 8.547939e-10
> logLik( randEffBoth )
'log Lik.' -64.31272 (df=5)
> print.default( randEffBoth )
$maximum
[1] -64.31272

$estimate
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
-0.235535467  1.893305460  1.972325289  0.001776973  0.052886968 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 2.487688e-08 -2.871254e-06  1.028026e-06  4.853692e-07 -3.020918e-06 

$hessian
            (Intercept)          x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -9.9215611  -1.4895580 -5.3035083  -0.0820374  -0.3186171
x1           -1.4895580 -15.1354595 -0.5438191   6.2936777   7.6261353
x2           -5.3035083  -0.5438191 -4.3889375   0.1480904   1.0870164
logSigmaMu   -0.0820374   6.2936777  0.1480904 -15.8045283  -1.3710175
logSigmaNu   -0.3186171   7.6261353  1.0870164  -1.3710175 -43.1836339

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 16

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1         x2  logSigmaMu logSigmaNu
 [1,] -0.85345502 -0.10600202 -0.1814284 -0.02424029 -0.8381663
 [2,] -1.41652306 -0.02739585 -0.9720425  1.45685325 -1.1643003
 [3,]  1.29710955  1.02071645  0.9249772  1.09192822  0.1536204
 [4,]  0.07071079 -0.25221748 -0.3986639 -0.70161956 -1.8243307
 [5,]  0.08940243  0.80718484  0.6470466 -0.69053380 -0.2869973
 [6,]  0.55895982  0.49540605  0.4285452 -0.29156512 -0.3618361
 [7,] -0.11968838 -3.06103611 -0.2365183 -0.70670422  6.3435264
 [8,] -0.20931458  0.33524154  0.0832306 -0.59070813 -1.0295423
 [9,]  1.03431545  0.66026310  0.2882436  0.19767251 -1.2965692
[10,] -0.42765160 -0.58469153 -0.1171546 -0.39622543 -1.8014625
[11,] -0.04032187  1.09571343 -0.5082752 -0.86763297  2.0031266
[12,]  1.14007145  0.50584814  0.8314616  0.58515264 -0.7454354
[13,]  0.53481223 -0.28157458  0.3477457 -0.28643956 -1.4343028
[14,] -1.63752640 -1.34696463 -0.8377496  2.11919025  2.7628210
[15,] -0.02090079  0.73950577 -0.2994167 -0.89512731 -0.4801545

$call
censReg(formula = yBoth ~ x1 + x2, left = 0, right = 3, data = pData, 
    method = "BFGSR")

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             28             12 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## re-order observations/individuals
> set.seed( 234 )
> perm <- sample( nId )
> nData2 <- nData
> nData2$id <- NA
> for( i in 1:nId ) {
+    nData2$id[ nData$id == paste( "F", i, sep = "_" ) ] <-
+       paste( "G", perm[ i ], sep = "_" )
+ }
> pData2 <- pdata.frame( nData2, c( "id", "time" ) )
> randEffBfgsr2 <- censReg( y ~ x1 + x2, data = pData2, method = "BFGSR" )
> all.equal( randEffBfgsr2[ -c(11,12) ], randEffBfgsr[ -c(11,12) ] )
[1] TRUE
> all.equal( sort( randEffBfgsr2[[ 11 ]] ), sort( randEffBfgsr[[ 11 ]] ) )
[1] TRUE
> 
> 
> ## unbalanced panel data
> nDataUnb <- nData[ -c( 2, 5, 6, 8 ), ]
> pDataUnb <- pdata.frame( nDataUnb, c( "id", "time" ) )
> randEffBfgsrUnb <- censReg( y ~ x1 + x2, data = pDataUnb, method = "BFGSR" )
> print( randEffBfgsrUnb )

Call:
censReg(formula = y ~ x1 + x2, data = pDataUnb, method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  -0.225080    1.640577    2.112079   -0.167313   -0.001134 

> maxLik:::summary.maxLik( randEffBfgsrUnb )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -71.19256 
5  free parameters
Estimates:
              Estimate Std. error t value   Pr(> t)    
(Intercept) -0.2250795  0.4726959 -0.4762  0.633959    
x1           1.6405767  0.2110697  7.7727 7.685e-15 ***
x2           2.1120788  0.6849330  3.0836  0.002045 ** 
logSigmaMu  -0.1673126  0.2714583 -0.6163  0.537665    
logSigmaNu  -0.0011337  0.1322715 -0.0086  0.993162    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBfgsrUnb )

Call:
censReg(formula = y ~ x1 + x2, data = pDataUnb, method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            56             17             39              0 

Coefficients:
             Estimate Std. error t value  Pr(> t)    
(Intercept) -0.225080   0.472696  -0.476  0.63396    
x1           1.640577   0.211070   7.773 7.68e-15 ***
x2           2.112079   0.684933   3.084  0.00204 ** 
logSigmaMu  -0.167313   0.271458  -0.616  0.53767    
logSigmaNu  -0.001134   0.132271  -0.009  0.99316    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -71.19256 on 5 Df

> logLik( randEffBfgsrUnb )
'log Lik.' -71.19256 (df=5)
> print.default( randEffBfgsrUnb )
$maximum
[1] -71.19256

$estimate
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
-0.225079532  1.640576704  2.112078831 -0.167312618 -0.001133654 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-8.636040e-06 -1.453204e-05 -7.787637e-06  1.016841e-05 -1.994848e-05 

$hessian
            (Intercept)         x1         x2  logSigmaMu logSigmaNu
(Intercept)  -13.784888  -4.345494 -7.5260689  -1.1169013  -1.938671
x1            -4.345494 -25.808843 -2.0565428   4.6495651   4.051833
x2            -7.526069  -2.056543 -6.2649095  -0.1454329  -1.045995
logSigmaMu    -1.116901   4.649565 -0.1454329 -14.9357030  -3.771780
logSigmaNu    -1.938671   4.051833 -1.0459950  -3.7717801 -58.831584

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)           x1          x2  logSigmaMu  logSigmaNu
 [1,] -0.50840052  0.087714316  0.10287525 -0.39431964 -0.53426583
 [2,] -1.81732267  0.065815016 -1.24804243  1.79967366 -0.96091655
 [3,]  1.78433755  0.484533165  1.76843009  1.73329056  1.89069332
 [4,]  0.15176201 -0.163179756 -0.39680494 -0.73698273 -1.58181515
 [5,]  0.08189442  1.038061250  0.69691610 -0.67803233 -0.45084034
 [6,]  0.33234643 -0.230428212  0.37329832 -0.53971463 -1.57493250
 [7,] -0.17917946 -3.030324203 -0.24829015 -0.62279217  5.48422908
 [8,]  0.01887239 -0.004113708  0.01079379 -0.41776542 -0.58162397
 [9,]  1.11662282  0.666294925  0.29584825  0.06450853 -1.68416734
[10,] -0.53726364 -0.419646234 -0.20413611 -0.40687228 -1.97452123
[11,] -0.08242475  1.380218291 -0.64791274 -0.82394685  2.50003236
[12,]  1.25880532  0.532782587  0.66844750  0.23053623 -1.79300733
[13,]  0.44705025 -0.163466537  0.28638877 -0.46787239 -1.45058887
[14,] -1.89296358 -1.288373430 -0.96260700  1.98453208  2.67979864
[15,] -0.17414520  1.044098000 -0.49521247 -0.72423245  0.03190577

$call
censReg(formula = y ~ x1 + x2, data = pDataUnb, method = "BFGSR")

$nObs
         Total  Left-censored     Uncensored Right-censored 
            56             17             39              0 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## NAs in data
> pDataNa <- pData
> obsNa <- which( ! rownames( pData ) %in% rownames( pDataUnb ) )
> pDataNa$y[ obsNa[ 1:2 ] ] <- NA
> pDataNa$x1[ obsNa[ 3 ] ] <- NA
> pDataNa$x2[ obsNa[ c( 1, 2, 4 ) ] ] <- NA
> randEffBfgsrNa <- censReg( y ~ x1 + x2, data = pDataNa, method = "BFGSR" )
> all.equal( randEffBfgsrNa[ -12 ], randEffBfgsrUnb[ -12 ] )
[1] TRUE
> 
> 
> 
